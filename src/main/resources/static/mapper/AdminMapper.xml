<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.mapper.AdminMapper">
    <resultMap id="BaseResultMap" type="com.example.model.entity.Admin">
        <id column="admin_id" jdbcType="INTEGER" property="adminId"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="role_id" jdbcType="INTEGER" property="roleId"/>
        <result column="full_name" jdbcType="VARCHAR" property="fullName"/>
        <result column="contact" jdbcType="VARCHAR" property="contact"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        admin_id
        , user_id, role_id, full_name, contact, email, avatar
    </sql>
    <select id="selectByExample" parameterType="com.example.model.entity.AdminExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from admins
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from admins
        where admin_id = #{adminId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from admins
        where admin_id = #{adminId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.example.model.entity.AdminExample">
        delete from admins
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.example.model.entity.Admin">
        insert into admins (admin_id, user_id, role_id,
                            full_name, contact, email,
                            avatar)
        values (#{adminId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER},
                #{fullName,jdbcType=VARCHAR}, #{contact,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
                #{avatar,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.example.model.entity.Admin">
        insert into admins
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="adminId != null">
                admin_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="fullName != null">
                full_name,
            </if>
            <if test="contact != null">
                contact,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="avatar != null">
                avatar,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="adminId != null">
                #{adminId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="fullName != null">
                #{fullName,jdbcType=VARCHAR},
            </if>
            <if test="contact != null">
                #{contact,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                #{avatar,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.model.entity.AdminExample" resultType="java.lang.Long">
        select count(*) from admins
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update admins
        <set>
            <if test="row.adminId != null">
                admin_id = #{row.adminId,jdbcType=INTEGER},
            </if>
            <if test="row.userId != null">
                user_id = #{row.userId,jdbcType=INTEGER},
            </if>
            <if test="row.roleId != null">
                role_id = #{row.roleId,jdbcType=INTEGER},
            </if>
            <if test="row.fullName != null">
                full_name = #{row.fullName,jdbcType=VARCHAR},
            </if>
            <if test="row.contact != null">
                contact = #{row.contact,jdbcType=VARCHAR},
            </if>
            <if test="row.email != null">
                email = #{row.email,jdbcType=VARCHAR},
            </if>
            <if test="row.avatar != null">
                avatar = #{row.avatar,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update admins
        set admin_id = #{row.adminId,jdbcType=INTEGER},
        user_id = #{row.userId,jdbcType=INTEGER},
        role_id = #{row.roleId,jdbcType=INTEGER},
        full_name = #{row.fullName,jdbcType=VARCHAR},
        contact = #{row.contact,jdbcType=VARCHAR},
        email = #{row.email,jdbcType=VARCHAR},
        avatar = #{row.avatar,jdbcType=VARCHAR}
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.model.entity.Admin">
        update admins
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=INTEGER},
            </if>
            <if test="fullName != null">
                full_name = #{fullName,jdbcType=VARCHAR},
            </if>
            <if test="contact != null">
                contact = #{contact,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="avatar != null">
                avatar = #{avatar,jdbcType=VARCHAR},
            </if>
        </set>
        where admin_id = #{adminId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.model.entity.Admin">
        update admins
        set user_id   = #{userId,jdbcType=INTEGER},
            role_id   = #{roleId,jdbcType=INTEGER},
            full_name = #{fullName,jdbcType=VARCHAR},
            contact   = #{contact,jdbcType=VARCHAR},
            email     = #{email,jdbcType=VARCHAR},
            avatar    = #{avatar,jdbcType=VARCHAR}
        where admin_id = #{adminId,jdbcType=INTEGER}
    </update>
</mapper>
