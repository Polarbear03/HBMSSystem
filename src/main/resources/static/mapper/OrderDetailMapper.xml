<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.mapper.OrderDetailMapper">
    <resultMap id="BaseResultMap" type="com.example.model.entity.OrderDetail">
        <id column="order_detail_id" jdbcType="INTEGER" property="orderDetailId"/>
        <result column="order_id" jdbcType="INTEGER" property="orderId"/>
        <result column="product_id" jdbcType="INTEGER" property="productId"/>
        <result column="quantity" jdbcType="INTEGER" property="quantity"/>
        <result column="unit_price" jdbcType="DECIMAL" property="unitPrice"/>
        <result column="discount" jdbcType="DECIMAL" property="discount"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        order_detail_id
        , order_id, product_id, quantity, unit_price, discount
    </sql>
    <select id="selectByExample" parameterType="com.example.model.entity.OrderDetailExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from order_details
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from order_details
        where order_detail_id = #{orderDetailId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from order_details
        where order_detail_id = #{orderDetailId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.example.model.entity.OrderDetailExample">
        delete from order_details
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.example.model.entity.OrderDetail">
        insert into order_details (order_detail_id, order_id, product_id,
                                   quantity, unit_price, discount)
        values (#{orderDetailId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{productId,jdbcType=INTEGER},
                #{quantity,jdbcType=INTEGER}, #{unitPrice,jdbcType=DECIMAL}, #{discount,jdbcType=DECIMAL})
    </insert>
    <insert id="insertSelective" parameterType="com.example.model.entity.OrderDetail">
        insert into order_details
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="orderDetailId != null">
                order_detail_id,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="productId != null">
                product_id,
            </if>
            <if test="quantity != null">
                quantity,
            </if>
            <if test="unitPrice != null">
                unit_price,
            </if>
            <if test="discount != null">
                discount,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="orderDetailId != null">
                #{orderDetailId,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=INTEGER},
            </if>
            <if test="productId != null">
                #{productId,jdbcType=INTEGER},
            </if>
            <if test="quantity != null">
                #{quantity,jdbcType=INTEGER},
            </if>
            <if test="unitPrice != null">
                #{unitPrice,jdbcType=DECIMAL},
            </if>
            <if test="discount != null">
                #{discount,jdbcType=DECIMAL},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.model.entity.OrderDetailExample" resultType="java.lang.Long">
        select count(*) from order_details
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update order_details
        <set>
            <if test="row.orderDetailId != null">
                order_detail_id = #{row.orderDetailId,jdbcType=INTEGER},
            </if>
            <if test="row.orderId != null">
                order_id = #{row.orderId,jdbcType=INTEGER},
            </if>
            <if test="row.productId != null">
                product_id = #{row.productId,jdbcType=INTEGER},
            </if>
            <if test="row.quantity != null">
                quantity = #{row.quantity,jdbcType=INTEGER},
            </if>
            <if test="row.unitPrice != null">
                unit_price = #{row.unitPrice,jdbcType=DECIMAL},
            </if>
            <if test="row.discount != null">
                discount = #{row.discount,jdbcType=DECIMAL},
            </if>
        </set>
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update order_details
        set order_detail_id = #{row.orderDetailId,jdbcType=INTEGER},
        order_id = #{row.orderId,jdbcType=INTEGER},
        product_id = #{row.productId,jdbcType=INTEGER},
        quantity = #{row.quantity,jdbcType=INTEGER},
        unit_price = #{row.unitPrice,jdbcType=DECIMAL},
        discount = #{row.discount,jdbcType=DECIMAL}
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.model.entity.OrderDetail">
        update order_details
        <set>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=INTEGER},
            </if>
            <if test="productId != null">
                product_id = #{productId,jdbcType=INTEGER},
            </if>
            <if test="quantity != null">
                quantity = #{quantity,jdbcType=INTEGER},
            </if>
            <if test="unitPrice != null">
                unit_price = #{unitPrice,jdbcType=DECIMAL},
            </if>
            <if test="discount != null">
                discount = #{discount,jdbcType=DECIMAL},
            </if>
        </set>
        where order_detail_id = #{orderDetailId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.model.entity.OrderDetail">
        update order_details
        set order_id   = #{orderId,jdbcType=INTEGER},
            product_id = #{productId,jdbcType=INTEGER},
            quantity   = #{quantity,jdbcType=INTEGER},
            unit_price = #{unitPrice,jdbcType=DECIMAL},
            discount   = #{discount,jdbcType=DECIMAL}
        where order_detail_id = #{orderDetailId,jdbcType=INTEGER}
    </update>
</mapper>
